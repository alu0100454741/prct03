PREGUNTAS DE LPP Practica03

21.¿Qué diferencia hay entre "\t\n" y ’\t\n’?
  Las dobles comillas interpreta el lenguaje ruby que ahi se escribe, en cambio las simples no lo interpreta
  y escribe lo que ahi se encuentra aunque sea ruby.

22.¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
  %q funciona de la misma forma que comillas simples, todo lo que se escriba dentro de el se pondra entre
  comillas simples.
  Es un String
  :052 > b = %q{Hello world\n}
  => "Hello world\\n" 
  
  Es un String
  :057 > a = %q{’a’ ’b’ ’c’}
  => "’a’ ’b’ ’c’"
 
23.¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
  %q funciona de la misma forma que comillas dobles,interpreta todo lo que se escriba dentro de el.
  
  Es un string
  :060 > %Q{hello world\n}
  => "hello world\n"
  
  Es string
  :063 >  %Q{"a" "b" "c"}
  => "\"a\" \"b\" \"c\"" 

24.¿Qué queda en c?

  :065 > a = 4
  => 4 
  :066 > b = 2
  => 2 
  :067 > c = <<HERE
  :068"> --#{a}--
  :069"> --#{b}--
  :070"> HERE
  => "--4--\n--2--\n"

25.¿Qué queda en c?

  :065 > a = 4
  => 4 
  :066 > b = 2
  => 2 
  :067 > c = <<'HERE'
  :068"> --#{a}--
  :069"> --#{b}--
  :070"> HERE
  => "--\#{a}--\nb = 2\n" 

26. s ="hello".¿Cuál es el valor de las siguientes expresiones?

  :079 > s[0,2]
  => "he" 
  :079 > s[0,2]
  => "he" 
  :081 > s[0,10]
  => "hello" 

27. ¿Qué queda en g?

  :001 > g = "hello"
  => "hello" 
  :002 > g << " world"
  => "hello world" 
  :003 > g
  => "hello world" 

28. ¿Qué queda en e?

  :004 > e = '.'*3
  => "..." 

29. ¿Cuál es el resultado?

  :008 > a = 1
  => 1 
  :009 > "#{a=a+1}"*3
  => "222" 

30. ¿Qué es esto? %w[this is a test]

  Esta sentencia convierte lo que esta dentro a un array
  =>   %w[this is a test]
  => ["this", "is", "a", "test"]
 
31 ¿Qué es esto? %w[\t \n]
 
  :005 > %w[\t \n]
  => ["\\t", "\\n"] 
 
32.¿Qué es esto?%W[\t \n]?
 
  :001 > %W[\t \n]
  => ["\t", "\n"] 

33.¿Qué contiene nils? nils = Array.new(3)?

  Un array relleno de  3 nils
  :002 > nils = Array.new(3)
  => [nil, nil, nil]
 
34. ¿Qué contiene zeros? zeros = Array.new(3, 0)

  Un array lleno de ceros
  :004 > zeros = Array.new(3, 0)
  => [0, 0, 0]

35. ¿Qué queda en b?

  :006 > x = [[1,2],[3,4]]
  => [[1, 2], [3, 4]] 
  :007 > b =  Array.new(x)
  => [[1, 2], [3, 4]] 

36. ¿Qué queda en c?
 
  :008 > c = Array.new(3) { |i| 2*i }
  => [0, 2, 4]
 
37. ¿Cuál es el resultado de cada uno de las operaciones?
 
  => a = ('a'..'e').to_a
  => ["a", "b", "c", "d", "e"] 
  => a[1,1]
  => ["b"] 
  :012 > a[-2,2]
  => ["d", "e"] 
  :013 > a[0..2]
  => ["a", "b", "c"] 
  :014 > a[0...1]
  => ["a"] 
  :015 > a[-2..-1]
  => ["d", "e"]

38. ¿Cuál es el resultado de cada una de estas operaciones?

  :027 > a = ('a'..'e').to_a
  => ["a", "b", "c", "d", "e"] 
  :028 > a[0,2] = %w{A B}
  => ["A", "B"] 
  :029 > a
  => ["A", "B", "c", "d", "e"] 
  :030 > a[2..5] = %w{C D E}
  => ["C", "D", "E"] 
  :031 > a
  => ["A", "B", "C", "D", "E"] 
  :032 > a[0,0] = [1,2,3]
  => [1, 2, 3] 
  :033 > a
  => [1, 2, 3, "A", "B", "C", "D", "E"] 
  :034 > a[0,2] = []
  => [] 
  :035 > a
  => [3, "A", "B", "C", "D", "E"]
  :002 > a[-1,1]=['Z']
  => ["Z"] 
  :003 > a
  => [3, "A", "B", "C", "D", "Z"] 
  :004 > a[-2,2]= nil
  => nil 
  :005 > a
  => [3, "A", "B", "C", nil]
  
39. ¿Cuál es el resultado de cada una de estas operaciones?
 
  > a = (1..4).to_a
  => [1, 2, 3, 4] 
  :007 > a = a + [4, 5]
  => [1, 2, 3, 4, 4, 5] 
  :008 > a += [[6, 7, 8]]
  => [1, 2, 3, 4, 4, 5, [6, 7, 8]] 
  :009 > a = a + 9
  TypeError: no implicit conversion of Fixnum into Array

40. ¿Cuál es el resultado de cada una de estas operaciones?

  :010 >  x = %w{a b c b a}
  => ["a", "b", "c", "b", "a"] 
  :011 > x = x - %w{b c d}
  => ["a", "a"] 
  
41. ¿Cuál es el resultado de cada una de estas operaciones?

  :012 >  z = [0]*8
  => [0, 0, 0, 0, 0, 0, 0, 0] 

42. ¿Cuál es el resultado de cada una de estas operaciones?

  :013 >  a = []
  => [] 
  :015 > a << 1
  => [1] 
  :017 > a << 2 << 3
  => [1, 2, 3] 
  :018 > a << [4, 5, 6]
  => [1, 2, 3, [4, 5, 6]] 
  :019 > a.concat [7, 8]
  => [1, 2, 3, [4, 5, 6], 7, 8]

43. ¿Cuál es el resultado de cada una de estas operaciones?

  :020 > a = [1, 1, 2, 2, 3, 3, 4]
  => [1, 1, 2, 2, 3, 3, 4] 
  :021 > b = [5, 5, 4, 4, 3, 3, 2]
  => [5, 5, 4, 4, 3, 3, 2] 
  :022 >  c = a | b
  => [1, 2, 3, 4, 5] 
  :023 > d = b | a
  => [5, 4, 3, 2, 1] 
  :024 > e = a & b
  => [2, 3, 4] 
  :025 > f = b & a
  => [4, 3, 2] 
  
44. ¿Qué resultados dan las siguientes operaciones?

  :026 > a = 1..10
  => 1..10 
  :027 > a.class
  => Range 
  :028 > a.to_a
  => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
  :029 > b = 1...10
  => 1...10 
  :030 > b.to_a
  => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
  :031 > b.include? 10
  => false 
  :032 > b.include? 8
  => true 
  :033 > b.step(2) {|x| print "#{x} "}
  1 3 5 7 9  => 1...10 
  :034 > 1..3.to_a
  NoMethodError: undefined method `to_a' for 3:Fixnum
  
45. ¿Qué resultados dan las siguientes operaciones? 

  :035 > r = 0...100
  => 0...100 
  :036 >  r.member? 50
  => true 
  :037 > r.include? 99.9
  => true 
  :038 > r.member? 99.9
  => true 
  
46. ¿Qué resultados dan las siguientes operaciones?

  :040 > true.class
  => TrueClass 
  :041 > false.class
  => FalseClass 
  :042 >  puts "hello" if 0
  hello
  => nil 
  :043 > puts "hello" if nil
  => nil 
  :044 >  puts "hello" if ""
  (irb):44: warning: string literal in condition
  hello
  => nil 
  
47. ¿Qué resultados dan las siguientes operaciones?
 
  :045 > x = :sym
  => :sym 
  :046 > x.class
  => Symbol 
  :047 > x == 'sym'
  => false 
  :049 > x == :sym
  => true 
  :050 >  z = :'a long symbol'
  => :"a long symbol" 
  :052 > z.class
  => Symbol 
  :053 > x == 'sym'.to_sym
  => true 
  :055 > x.to_s == 'sym'
  => true 
  
48. ¿Qué resultados se dan?

  :057 > s = "Ruby"
  => "Ruby" 
  :058 > t = s
  => "Ruby" 
  :059 > t[-1] = ""
  => "" 
  :060 > print s
  Rub => nil 
  :061 > t = "Java"
  => "Java" 
  :062 > print s, t
  RubJava => nil 
  
49. ¿Cuál es el resultado?

  :063 > "%d %s" % [3, "rubies"]
  => "3 rubies"
  
50. ¿Cuáles son los resultados?

  :064 > x, y = 4, 5
  => [4, 5] 
  :065 > z = x > y ? x : y
  => 5 
  :066 > x,y,z = [1,2,3]
  => [1, 2, 3] 
  
51. ¿Qué resultados dan las siguientes operaciones?

  :067 > x = { :a => 1, :b => 2 }
  => {:a=>1, :b=>2} 
  :068 > x.keys
  => [:a, :b] 
  :069 > x.values
  => [1, 2] 
  :070 >  x[:c] = 3
  => 3 
  :071 >  x
  => {:a=>1, :b=>2, :c=>3} 
  :072 > x.delete('a')
  => nil 
  :073 > x
  => {:a=>1, :b=>2, :c=>3} 
  :074 > x.delete(:a)
  => 1 
  :075 > x
  => {:b=>2, :c=>3} 
  :076 > x = { :a => 1, :b => 2, :c => 4 }
  => {:a=>1, :b=>2, :c=>4} 
  :077 > x.delete_if { |k,v| v % 2 == 0 }
  => {:a=>1} 
  :078 > x
  => {:a=>1}

52. ¿Qué hace yield 4, 5?
  :001 > yield 4, 5
  LocalJumpError: no block given (yield)
  Llama un bloque, pero da un error porque no lo encuentra
  
53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignaci´on
counts = {}?

  Creaan dos Hash vacios, lo uno lo hace por medio del constructor y otro 
  lo hace directamenente.
  
54. ¿Qué retorna esta expresión? 'hello world, hello LPP'.scan /\w+/

  Retorna un Array
  :009 > 'hello world, hello LPP'.scan /\w+/
  => ["hello", "world", "hello", "LPP"]

55. Explique que hacen estas sentencias:
  c = { :a => 3, :b => 2, :c => 1 }
  c.keys.sort.each { |k| puts c[k] }
  La primera sentencia crea un hash y la siguiente itera en el hash sobre las claves
  y las ordena y las muestra.














